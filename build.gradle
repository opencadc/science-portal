import org.apache.tools.ant.filters.ReplaceTokens


plugins {
    id 'war'
    id "com.github.node-gradle.node" version "3.0.1"

    // IntelliJ IDEA plugin here to allow integration tests to appear properly in IDEs.
    id 'idea'
}

repositories {
    mavenLocal()
    mavenCentral()
}


dependencies {
    implementation 'com.opencsv:opencsv:[5.1,6.0)'
    implementation 'commons-net:commons-net:3.9.0'
    implementation 'org.apache.commons:commons-configuration2:[2.11.0,3.0.0)'
    implementation 'org.opencadc:cadc-access-control-identity:[1.1.0,)'
    implementation 'org.opencadc:cadc-gms:[1.0.12,2.0)'
    implementation 'org.opencadc:cadc-log:[1.1.5,)'
    implementation 'org.opencadc:cadc-rest:[1.3.9,)'
    implementation 'org.opencadc:cadc-util:[1.6,)'
    implementation 'org.opencadc:cadc-web-token:[1.1.1,2.0.0)'

    runtimeOnly 'commons-io:commons-io:[2.17.0,3.0.0)'
    runtimeOnly 'javax.servlet.jsp.jstl:jstl-api:1.2'
    runtimeOnly 'javax.servlet:jstl:1.2'
    runtimeOnly 'jstl:jstl:[1.0,)'
    runtimeOnly 'org.apache.taglibs:taglibs-standard-impl:1.2.5'

    testImplementation 'junit:junit:[4.12,5.0)'
    testImplementation 'org.mockito:mockito-core:[5.14.0,6.0.0)'
}

sourceCompatibility = '1.8'

war {
    // Trying to fix static file caching on new build.
    eachFile {
        if (it.name.endsWith('.jsp')) {
            filter(ReplaceTokens, tokens: [version: project.version])
        }
    }

    archiveName 'science-portal.war'
}

node {
    version = '20.11.0'
    npmVersion = '10.2.0'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir = file("${project.buildDir}/npm")
    // Set the working directory using nodeModulesDir
    nodeModulesDir = file("${project.projectDir}/client")
}

npmInstall {
    inputs.file('client/package.json')
    inputs.file('client/package-lock.json')

    logging.level = LogLevel.INFO

    doLast {
        def nodeModules = file('client/node_modules')
        if (!nodeModules.exists()) {
            throw new GradleException("npm install failed: node_modules directory not found in client folder")
        }
    }
}

task buildReactApp(type: NpmTask, dependsOn: 'npmInstall') {
    // Enable verbose output
    logging.level = LogLevel.INFO
    environment = [
            'NODE_ENV': 'production',
            'CI': 'true'
    ]

    inputs.files(fileTree('client/src'))
    inputs.file('client/package.json')
    inputs.file('client/tsconfig.json')
    inputs.file('client/vite.config.ts')

    outputs.dir('src/main/webapp/dist')

    args = ['run', 'build', '--verbose']

    doFirst {
        println "Running npm build in directory: ${project.projectDir}/client"
        println "Node version: ${node.version}"
        println "NPM version: ${node.npmVersion}"
    }

    doLast {
        def jsFile = file('src/main/webapp/dist/react-app.js')
        def cssFile = file('src/main/webapp/dist/react-app.css')

        if (!jsFile.exists() || !cssFile.exists()) {
            throw new GradleException("Build failed: Expected output files were not generated")
        }
    }
}

task cleanNodeModules(type: Delete) {
    delete 'client/node_modules'
    delete 'client/package-lock.json'
}

task cleanReactApp(type: Delete) {
    delete 'src/main/webapp/dist'
}

task cleanAll(dependsOn: [clean, cleanNodeModules, cleanReactApp])

processResources.dependsOn 'buildReactApp'

clean.delete << file('src/main/webapp/dist')
